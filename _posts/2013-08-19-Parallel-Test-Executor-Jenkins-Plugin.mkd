---
layout: post
title: Using Parallel Testing Executor Jenkins plugin for non-java jobs
tags: [continous integration, jenkins-plugins, jenkins]
---

## Background

In Kohsuke Kawaguchi's slides [Jenkins state of union 2013](http://www.slideshare.net/kohsuke/jenkins-state-of-union-2013), one of interesting plugin is [Parallel Test Executor Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Parallel+Test+Executor+Plugin), it looks like it can divide the testing jobs and collect the result after that.

It will be excellent if it can be achieved using native jenlins plugins though we can find other way without jenkins

So I give a demo how it can works for non-java project, for example real acceptance testing.

All the sample files below are put in gist <https://gist.github.com/larrycai/6275888>

### Job 1 : control  

First `control` job is created to control how many jobs will be run parallel

![control job][img-parallel-job1]

The `test_agent` job is the real job to execute the testcase, `excluding-testcase.txt` is the excluding list for your test case, it will be generated by this job automatically.

And the `# of parallel tests` defines how many jobs will be executed at same time

### Job 2 : test_agent

`test_agent` job is simple, it just call the execution script `testing_xunit.py`

![test_agent job][img-parallel-job2]

the script shall do 3 things:

1. read all the testcases and exclude the test case list from `excluding-testcase.txt`, which is passed from parent job `control`
2. execute the test case as normal
3. generate the junit xml format

Below is the script for demo

	#!/bin/env python
	from junit_xml import TestSuite, TestCase

	all_testcase = []
	# read all test case
	with open("all-testcase.txt") as fp:
		all_testcase = fp.read().splitlines()
		
	excl_testcase = []
	# real all excluding case, could be empty
	try:
		with open("excluding-testcase.txt") as fp:
			excl_testcase = fp.read().splitlines()
	except IOError:
		pass

	# this is hack solution for this plugin
	excl_testcase = map(lambda s: s.replace(".java",""), excl_testcase)

	# exclude the test case
	print "All test case:\n  ",  ",".join(all_testcase)
	print "Exclude test case:\n  ", ",".join(excl_testcase)

	s = set(excl_testcase)
	testcases = [x for x in all_testcase if x not in s]

	# now simulate to run the testing using testcases
	print "\nNow we are executing the %d test cases \n %s\n" % (len(testcases), ",".join(testcases))

	# now start to record into junit xml format
	test_cases = []
	for tc in testcases:
		test_cases.extend([TestCase("testname", tc, 12)])

	ts = TestSuite("my test suite", test_cases)
	# pretty printing is on by default but can be disabled using prettyprint=False

	with open("result.xml","w") as fp:
		fp.write(TestSuite.to_xml_string([ts]))

	print "now the test result is saved into result.xml"	

It assume all the test cases are put in `all-testcase.txt`, and using python-xml python module to generate junit.xml file in the end

### Result:

After the `control` job is build, you can see the 3 jobs are executed

![control job result][img-parallel-job3]

And all the test cases are shown out

![control job result][img-parallel-job4]

## Summary

This small plugin is very useful if you have lots of test cases want to run parallel to reduce time, and there is no complex things behind it.

### Issues:

There are small issues could be improved or learn how to solve 

* Why the excluding file list contains the prefix `.java` ?
* How can `test_agent` get extra information from parent job like how many jobs are running ? Could be useful ?
* Can we see the relation clearly for the jobs ?

Shared in <a href="https://plus.google.com/100729724738053223351?rel=author">Google</a>

## Reference

*   [K.K's Jenkins state of union 2013](http://www.slideshare.net/kohsuke/jenkins-state-of-union-2013)
*   [Parallel Test Executor Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Parallel+Test+Executor+Plugin)
*   [Parallel Test Executor Plugin main function](https://github.com/jenkinsci/parallel-test-executor-plugin/blob/master/src/main/java/org/jenkinsci/plugins/parallel_test_executor/ParallelTestExecutor.java)

  [img-parallel-job1]: http://www.larrycaiyu.com/blog/images/img-parallel-job1.png
  [img-parallel-job2]: http://www.larrycaiyu.com/blog/images/img-parallel-job2.png
  [img-parallel-job3]: http://www.larrycaiyu.com/blog/images/img-parallel-job3.png
  [img-parallel-job4]: http://www.larrycaiyu.com/blog/images/img-parallel-job4.png
